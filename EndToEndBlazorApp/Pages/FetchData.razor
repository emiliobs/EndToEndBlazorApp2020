@page "/fetchdata"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<WeatherForecastService>
@inject IJSRuntime js
@*<h1>Weather forecast</h1>*@
<!--AuthorizwViww allows us to only show section of thr page based on the security on the current user-->
<AuthorizeView>
    <!--Show this section if the user is logged in-->
    <Authorized>
        @*<h4>Hello, @context.User.Identity.Name!</h4>*@
        @if (forecasts == null)
        {
            <!--Show this if the current user has no data..... yet....-->
            <p><em>Loading.....</em></p>
            <img src="./images/gear.gif" alt="gear" />
        }
        else
        {


            <div class="row">
                <div class="col-xl-12">
                    <div class="card">
                        <div class="card-header" style="display:block; vertical-align:top;">
                            <em style="float:left; font-size:large; font:bolder;">Weather Forecast</em>
                            <em style="float:right; font:bold;">Hello, @context.User.Identity.Name!</em>
                        </div>
                        <div class="card-body">
                            <button class="btn btn-primary" @onclick="AddNewForecast"><i class="oi oi-plus"></i> Create New</button>
                            <br /><br />
                            <table class="table table-hover  table-striped">

                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Temperature. (C)</th>
                                        <th>Temperature. (F)</th>
                                        <th>Summary</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var forecasts in forecasts)
                                    {
                                        <tr>
                                            <td>@forecasts.Date.Value.ToShortDateString()</td>
                                            <td>@forecasts.TemperatureC</td>
                                            <td>@forecasts.TemperatureF</td>
                                            <td>@forecasts.Summary</td>

                                            <td>
                                                <button class="btn btn-info" title="Edit" @onclick="(() => EditForecast(forecasts))"><i class="oi oi-pencil"></i></button>
                                                @*<button class="btn btn-danger" title="Delete" ><i class="oi oi-trash"></i></button>*@
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a forecast -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Forecast</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>

                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <input class="form-control" type="text" placeholder="Celsius Forecast." @bind="weatherForecast.TemperatureC" />
                                <br />
                                <input class="form-control" type="text" placeholder="Celsius Fahrenheit Forecast." @bind="weatherForecast.TemperatureF" />
                                <br />
                                <input class="form-control" type="text" placeholder="Summary." @bind="weatherForecast.Summary" />
                                <br />
                                <button class="btn btn-success" @onclick="@SaveForecast" title="Save"><i class="oi oi-file"></i></button>
                                @if (weatherForecast.Id > 0)
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger" title="Delete" @onclick="DeleteForecast"> <i class="oi oi-trash"></i></button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </Authorized>


    <!-- show this section if the user is not logged in-->
    <NotAuthorized>
        <p><em>You'r not signed in.</em></p>
    </NotAuthorized>
</AuthorizeView>



@code {

    //Authenticatetionstate is available as a Cascadingparameter
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    List<WeatherForecast> forecasts;

    WeatherForecast weatherForecast = new WeatherForecast();
    bool ShowPopup = false;


    protected override async Task OnInitializedAsync()
    {
        //Get the user current user:
        var user = (await AuthenticationStateTask).User;
        //Get the forescat for th the current user:
        //We access WatherForescatservice using @service:
        forecasts = await Service.GetForecastAsync(user.Identity.Name);

        // await js.InvokeAsync<object>("UsedTable","#Table");

    }

    void ClosePopup()
    {
        ShowPopup = false;
    }

    void AddNewForecast()
    {
        //Make new forecast:
        weatherForecast = new WeatherForecast();
        //Set Id to 0 so we it is a new record:
        weatherForecast.Id = 0;
        //open the Popup
        ShowPopup = true;
    }

    void EditForecast(WeatherForecast model)
    {
        //Set the seleted forecast as the current forecast:
        weatherForecast = model;
        ShowPopup = true;
    }

    async Task DeleteForecast()
    {
        ShowPopup = false;
        var user = (await AuthenticationStateTask).User;
        var result = @Service.DeleteForecastAsync(weatherForecast);
        forecasts = await Service.GetForecastAsync(user.Identity.Name);
    }

    async Task SaveForecast()
    {
        //Close the poput
        ShowPopup = false;
        //Get the current user:
        var user = (await AuthenticationStateTask).User;
        //A new forecast will  have the Id set to 0
        if (weatherForecast.Id == 0)
        {
            //Create a new forecast:
            WeatherForecast newWeatherForecast = new WeatherForecast();

            newWeatherForecast.Date = DateTime.Now;
            newWeatherForecast.Summary = weatherForecast.Summary;
            newWeatherForecast.TemperatureC = Convert.ToInt32(weatherForecast.TemperatureC);
            newWeatherForecast.TemperatureF = Convert.ToInt32(weatherForecast.TemperatureF);
            newWeatherForecast.UserName = user.Identity.Name;
            //Save the result:
            var result = @Service.CreateForecastAsync(newWeatherForecast);

        }
        else
        {
            //this is an update
            var result = await Service.UpdateForecastAsync(weatherForecast);
        }

        forecasts = await Service.GetForecastAsync(user.Identity.Name);
    }

}
