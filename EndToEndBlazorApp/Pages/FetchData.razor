@page "/fetchdata"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<WeatherForecastService>
@inject IJSRuntime js



@*<h1>Weather forecast</h1>*@
<!--AuthorizwViww allows us to only show section of thr page based on the security on the current user-->
<AuthorizeView>
    <!--Show this section if the user is logged in-->
    <Authorized>
        @*<h4>Hello, @context.User.Identity.Name!</h4>*@
        @if (forecasts == null)
        {
            <!--Show this if the current user has no data..... yet....-->
            <p><em>Loading.....</em></p>
            <img src="./images/gear.gif" alt="gear" />
        }
        else
        {
            <div class="row">
                <div class="col-xl-12">
                    <div class="card">
                        <div class="card-header" style="display:block; vertical-align:top;">
                            <em style="float:left; font-size:large; font:bolder;">Weather Forecast</em>
                            <em style="float:right; font:bold;">Hello, @context.User.Identity.Name!</em>
                        </div>
                        <div class="card-body">
                            <button class="btn btn-primary"><i class="oi oi-plus"></i> Create New</button>
                            <br /><br />
                            <table id="Table" class="table table-hover  table-striped">

                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Temperature. (C)</th>
                                        <th>Temperature. (F)</th>
                                        <th>Summary</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var forecasts in forecasts)
                                    {
                                        <tr>
                                            <td>@forecasts.Date.Value.ToShortDateString()</td>
                                            <td>@forecasts.TemperatureC</td>
                                            <td>@forecasts.TemperatureF</td>
                                            <td>@forecasts.Summary</td>

                                            <td>
                                                <button class="btn btn-info" title="Edit"><i class="oi oi-pencil"></i></button>
                                                <button class="btn btn-danger" title="Delete"><i class="oi oi-trash"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
        }
    </Authorized>
    <!-- show this section if the user is not logged in-->
    <NotAuthorized>
        <p><em>You'r not signed in.</em></p>
    </NotAuthorized>
</AuthorizeView>



@code {

    //Authenticatetionstate is available as a Cascadingparameter
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        //Get the user current user:
        var user = (await AuthenticationStateTask).User;
        //Get the forescat for th the current user:
        //We access WatherForescatservice using @service:
        forecasts = await Service.GetForecastAsync(user.Identity.Name);

        // await js.InvokeAsync<object>("UsedTable","#Table");

    }
}
